name: CherryPick PR

permissions: write-all

env:
  LABEL_PREFIX_CHERRYPICK: "cherrypick-"

on:
  pull_request_target:
    types:
      - opened
      - closed

jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

#      - uses: kceb/pull-request-url-action@v1
#        id: pr-url

      - name: cherry pick
        run: |
          set -x
          #====
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.number }}"
          echo "labels: ${PR_LABLES}"
          echo "number: ${{ github.event.number }}"
          echo "author: ${{ github.event.pull_request.user.login }}"
          #echo "GITHUB_REF: ${GITHUB_REF##*/}"
          echo "url: ${PR_URL}"
          #echo "url: ${{ steps.pr-url.outputs.url }}"
          #echo "sha: ${{ github.sha }}"
          #echo "github.base_ref: ${{ github.base_ref }}"
          echo "pr branch name, github.head_ref: ${{ github.head_ref }}"
          #echo "github.ref: ${{ github.ref }}"
          #echo "github.ref_name: ${{ github.ref_name }}"
          #echo "github.event.pull_request.base.sha = ${{ github.event.pull_request.base.sha }}"
          echo "pr latest commit, github.event.pull_request.head.sha = ${{ github.event.pull_request.head.sha }}"
          #== get labels
          echo ${{ secrets.WELAN_PAT }} | gh auth login --with-token
          gh pr view ${{ github.event.number }} | grep -i "^labels:"
          PR_LABLES=` gh pr view ${{ github.event.number }} | grep -i "^labels:" | tr ',' ' ' | tr -s ' ' | sed 's/labels://g' `
          #=== loop labels and get merge branchs
          WANT_MERGE_BRANCH_LIST=""
          for LABEL in ${PR_LABLES} ; do
              echo "checking lable $LABEL "
              PREFIX="${{ env.LABEL_PREFIX_CHERRYPICK }}"
              grep -E "^${PREFIX}" <<< "${LABEL}" &>/dev/null || continue
              BRANCH_NAME=` sed 's?'"${PREFIX}"'??' <<< "$LABEL" `
              WANT_MERGE_BRANCH_LIST+=" $BRANCH_NAME "
          done
          [ -z "$WANT_MERGE_BRANCH_LIST" ] && echo "no need to cherry pick" && exit 0
          echo "============= it is required to cherry pick to $WANT_MERGE_BRANCH_LIST ============"
          chmod +x ./tools/cherry/cherry.sh
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          git config --global user.email "you@example.com"
          git config --global user.name "weizhou.lan"
          #export GIT_AUTHOR_NAME="weizhou.lan"
          #export GIT_AUTHOR_EMAIL="email@example.com"
          #--- cherry pick
          for BRANCH in $WANT_MERGE_BRANCH_LIST ; do
              echo "---- cherry for ${BRANCH}"
              if ! git ls-remote --exit-code --heads origin ${BRANCH} ; then
                  # todo: create issue
                  echo "error, branch $BRANCH does not exist"
                  continue
              fi
              if ! ( git fetch origin ${BRANCH}:${BRANCH} && git checkout ${BRANCH} ) ; then
                  echo "error, failed to checkout to branch $BRANCH"
                  continue
              fi
              git branch
          done
          echo "all done"
          exit 0
          #
          if [ ! -f "./tools/cherry/cherry.sh" ] ; then 
              echo "error ,there is no /tools/cherry/cherry.sh in branch ${{ matrix.releaseName }} "
              exit 1
          fi
          export CHERRY_FROM_BRANCH=${{ github.head_ref }}
          if ./tools/cherry/cherry.sh "${{ github.event.pull_request.head.sha }}" ; then
              echo "succeed to cherry pick"
          else
              echo "error, failed to cherry pick"
              exit 1
          fi
          #--- create pr
          #echo ${{ secrets.WELAN_PAT }} | gh auth login --with-token
          #gh pr  create --title 'test' --body 'sadf'  --base ${{ matrix.releaseName }}



