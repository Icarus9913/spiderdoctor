name: Auto CherryPick PR

permissions: write-all

env:
  LABEL_PREFIX_CHERRYPICK: "cherrypick-"
  CHERRYPICK_LABEL: "robot-cherrypick"
  DEFAULT_REVIEWER: "weizhoublue"

on:
  pull_request_target:
    types:
      - closed

jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: cherry pick
        run: |
          set -x
          echo "============ print var ======== "
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.number }}"
          ACTION_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "number: ${{ github.event.number }}"
          echo "action url: ${ACTION_URL}"
          echo "author: ${{ github.event.pull_request.user.login }}"
          echo "url: ${PR_URL}"
          echo "pr to branch, github.base_ref: ${{ github.base_ref }}"
          echo "pr branch name, github.head_ref: ${{ github.head_ref }}"
          echo "pr latest commit, github.event.pull_request.head.sha = ${{ github.event.pull_request.head.sha }}"
          #
          #
          echo "============ get labels ======== "
          echo ${{ secrets.WELAN_PAT }} | gh auth login --with-token
          gh pr view ${{ github.event.number }} | grep -i "^labels:"
          PR_LABEL=` gh pr view ${{ github.event.number }} | grep -i "^labels:" | tr ',' ' ' | tr -s ' ' | sed 's/labels://g' `
          echo "PR_LABEL: ${PR_LABEL}"
          #
          #
          echo "============ get dest branch from labels ======== "
          WANT_MERGE_BRANCH_LIST=""
          for LABEL in ${PR_LABEL} ; do
              echo "checking label $LABEL "
              PREFIX="${{ env.LABEL_PREFIX_CHERRYPICK }}"
              grep -E "^${PREFIX}" <<< "${LABEL}" &>/dev/null || continue
              BRANCH_NAME=` sed 's?'"${PREFIX}"'??' <<< "$LABEL" `
              WANT_MERGE_BRANCH_LIST+=" $BRANCH_NAME "
          done
          [ -z "$WANT_MERGE_BRANCH_LIST" ] && echo "no branch to cherry pick" && exit 0
          echo "cherry pick to $WANT_MERGE_BRANCH_LIST "
          #
          #
          echo "============= get new commits from ${{ github.head_ref }} to ${{ github.base_ref }} ============"
          git branch
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }} || true
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }} || true
          git config --global user.email "robot@example.com"
          git config --global user.name "robot"
          git checkout ${{ github.head_ref }}
          git log  --left-right  ${{ github.head_ref }} ...${{ github.base_ref }} 
          ALL_COMMITS=` git log  --left-right  ${{ github.head_ref }} ...${{ github.base_ref }} | grep "commit <" | awk '{print $3}' | tr '\n' ' ' `
          [ -z "$ALL_COMMITS" ] && echo "error, failed to get any commits" && exit 1
          echo "commits for cherry pick: ${ALL_COMMITS} "
          #
          #
          echo "============ begin to cherry pick ============ "
          FAILURE_COUNTER=0
          for BRANCH in $WANT_MERGE_BRANCH_LIST ; do
              GH_FAILED_OPTION=" --title \"failed to auto cherry pick PR ${{ github.event.number }} to branch ${BRANCH} \"  "
              GH_FAILED_OPTION+=" --label \"${{ env.CHERRYPICK_LABEL }},pr-${{ github.event.number }}\" "
              GH_FAILED_OPTION+=" --assignee ${{ github.event.pull_request.user.login }},${{ env.DEFAULT_REVIEWER }} "
              echo "************** cherry for branch ${BRANCH}"
              if ! git ls-remote --exit-code --heads origin ${BRANCH} ; then
                  # todo: create issue
                  echo "error, branch $BRANCH does not exist"
                  gh issue create ${GH_FAILED_OPTION} \
                      --body "reason: the branch $BRANCH does not exist. [ pr ${PR_URL} ] [ action ${ACTION_URL} ] "
                  if (($?!=0)) ; then
                      echo "!!!! error, failed to create issue"
                      ((FAILURE_COUNTER++))
                  fi
                  continue
              fi
              git fetch origin ${BRANCH}:${BRANCH} || true
              if ! git checkout ${BRANCH} ; then
                  echo "error, failed to checkout to branch $BRANCH"
                  gh issue create ${GH_FAILED_OPTION} \
                      --body "reason: failed to get the branch $BRANCH. [ pr ${PR_URL} ] [ action ${ACTION_URL} ] "
                  if (($?!=0)) ; then
                      echo "!!!! error, failed to create issue"
                      ((FAILURE_COUNTER++))
                  fi
                  continue
              fi
              git branch --show-current
              FAIL=false
              for COMMIT in $ALL_COMMITS ; do
                  if ! git cherry-pick $COMMIT ; then 
                    FAIL=true 
                    echo "error, failed to cherry pick $COMMIT" 
                    git cherry-pick --abort
                    git reset --hard HEAD 
                    break
                  fi
              done
              if [ "$FAIL" == "true" ] ; then
                  echo "failed to cherry pick to branch $BRANCH "
                  gh issue create ${GH_FAILED_OPTION} \
                        --body "reason: commits conflict when merging to branch $BRANCH, please manually cherry pick it by yourself. [ pr ${PR_URL} ] [ action ${ACTION_URL} ] "
                  if (($?!=0)) ; then
                      echo "!!!! error, failed to create issue"
                      ((FAILURE_COUNTER++))
                  fi
              else
                  echo "succeeded to cherry pick to branch $BRANCH "
                  # create a pr
                  gh pr create --title "auto cherry pick PR ${{ github.event.number }} to branch ${BRANCH}" \
                      --reviewer "${{ github.event.pull_request.user.login }},${{ env.DEFAULT_REVIEWER }}" \
                      --label ${{ env.CHERRYPICK_LABEL }},pr-${{ github.event.number }}
                      --base ${BRANCH}
                  if (($?!=0)) ; then
                      echo "!!!! error, failed to create pr"
                      ((FAILURE_COUNTER++))
                  fi
              fi 
          done
          echo "=========== check result ============"
          if ((FAILURE_COUNTER>0)) ; then
              echo "error, $FAILURE_COUNTER failuire happened"
              exit 1
          else
              echo "all done"
              exit 0
          fi
