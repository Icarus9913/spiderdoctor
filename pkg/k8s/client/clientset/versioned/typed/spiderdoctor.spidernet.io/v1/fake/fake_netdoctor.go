// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	spiderdoctorspidernetiov1 "github.com/spidernet-io/spiderdoctor/pkg/k8s/apis/spiderdoctor.spidernet.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNetdoctors implements NetdoctorInterface
type FakeNetdoctors struct {
	Fake *FakeSpiderdoctorV1
}

var netdoctorsResource = schema.GroupVersionResource{Group: "spiderdoctor.spidernet.io", Version: "v1", Resource: "netdoctors"}

var netdoctorsKind = schema.GroupVersionKind{Group: "spiderdoctor.spidernet.io", Version: "v1", Kind: "Netdoctor"}

// Get takes name of the netdoctor, and returns the corresponding netdoctor object, and an error if there is any.
func (c *FakeNetdoctors) Get(ctx context.Context, name string, options v1.GetOptions) (result *spiderdoctorspidernetiov1.Netdoctor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(netdoctorsResource, name), &spiderdoctorspidernetiov1.Netdoctor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*spiderdoctorspidernetiov1.Netdoctor), err
}

// List takes label and field selectors, and returns the list of Netdoctors that match those selectors.
func (c *FakeNetdoctors) List(ctx context.Context, opts v1.ListOptions) (result *spiderdoctorspidernetiov1.NetdoctorList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(netdoctorsResource, netdoctorsKind, opts), &spiderdoctorspidernetiov1.NetdoctorList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &spiderdoctorspidernetiov1.NetdoctorList{ListMeta: obj.(*spiderdoctorspidernetiov1.NetdoctorList).ListMeta}
	for _, item := range obj.(*spiderdoctorspidernetiov1.NetdoctorList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested netdoctors.
func (c *FakeNetdoctors) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(netdoctorsResource, opts))
}

// Create takes the representation of a netdoctor and creates it.  Returns the server's representation of the netdoctor, and an error, if there is any.
func (c *FakeNetdoctors) Create(ctx context.Context, netdoctor *spiderdoctorspidernetiov1.Netdoctor, opts v1.CreateOptions) (result *spiderdoctorspidernetiov1.Netdoctor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(netdoctorsResource, netdoctor), &spiderdoctorspidernetiov1.Netdoctor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*spiderdoctorspidernetiov1.Netdoctor), err
}

// Update takes the representation of a netdoctor and updates it. Returns the server's representation of the netdoctor, and an error, if there is any.
func (c *FakeNetdoctors) Update(ctx context.Context, netdoctor *spiderdoctorspidernetiov1.Netdoctor, opts v1.UpdateOptions) (result *spiderdoctorspidernetiov1.Netdoctor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(netdoctorsResource, netdoctor), &spiderdoctorspidernetiov1.Netdoctor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*spiderdoctorspidernetiov1.Netdoctor), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNetdoctors) UpdateStatus(ctx context.Context, netdoctor *spiderdoctorspidernetiov1.Netdoctor, opts v1.UpdateOptions) (*spiderdoctorspidernetiov1.Netdoctor, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(netdoctorsResource, "status", netdoctor), &spiderdoctorspidernetiov1.Netdoctor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*spiderdoctorspidernetiov1.Netdoctor), err
}

// Delete takes name of the netdoctor and deletes it. Returns an error if one occurs.
func (c *FakeNetdoctors) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(netdoctorsResource, name, opts), &spiderdoctorspidernetiov1.Netdoctor{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNetdoctors) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(netdoctorsResource, listOpts)

	_, err := c.Fake.Invokes(action, &spiderdoctorspidernetiov1.NetdoctorList{})
	return err
}

// Patch applies the patch and returns the patched netdoctor.
func (c *FakeNetdoctors) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *spiderdoctorspidernetiov1.Netdoctor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(netdoctorsResource, name, pt, data, subresources...), &spiderdoctorspidernetiov1.Netdoctor{})
	if obj == nil {
		return nil, err
	}
	return obj.(*spiderdoctorspidernetiov1.Netdoctor), err
}
